Réflexion en cours sur les projets/travaux/tâches:

---------------------------
Projets:
- logbook content: oui tout simple et très utile.
- archivage: utile si beaucoup de projets. archivé possible ou pas selon état??
	--> possible uniquement si annulé, reporté ou terminé.
- états: travail actif et semi actif ? autre champ à la place ? oui on inclut ces 2 états pour avoir une meilleure idée de ce qui se passe.

- lien wiki ? Non. peu utile.
- lien vidéoconférence ? Non. peu utile.

- ajout manager_id (cf participate)


---------------------------
Travaux:
- open
	utile pour contacter/interagir avec un projet sans intégrer le groupe. ca permet de garder uniquement les personnes actives dans le groupe.
	--> ca implique que toutes les tâches du travail sont en libre modification. Donc oui!

- Travail "boite de réception" d'un projet. Oui on met. Voici les détails:
	- permet d'envoyer des tâches pour un projet sans spécifier le travail
		- parce que c'est une tâche administrative qui n'entre dans aucun des travaux actuels
		- parce qu'on ne sait pas quel est le travail en lien
		- parce que c'est plus rapide
		- parce que le travail en question n'est pas ouvert--> du coup une boite de réception pas open ca fait une sorte de niveau semi-open).
	- permet d'envoyer des tâches depuis ailleurs que le Kanban (depuis la page détails d'un projet et la page gestion du projet)
	
	--> Cas spéciaux:
		- open: ce travail pourrait être open ou pas. (si oui alors toutes les 	tâches sont éditable, si non aucune tâche est modifiable sauf celles qu'on a créé--> propres tâches modifiables permettant de supprimer si erreur ou de gérer l'état par ex.)
		- visible: si le travail est non visible, les tâches ne sont pas modifiables et non visibles. On voit seulement (et toujours) le nom dans le placeholder mais on ne verra pas le travail dans le kanban.

	--> Contraintes: 
		- il doit avoir exactement 1 travail désigné comme boite de réception. (ni plus ni moins)
		- Créé automatiquement à la création du projet
		- Valeurs modifiables (sans project_id, creator_id et creation_date --> jamais modifiables):
			- name
			- description
			- visible
			- open
		Valeurs non-modifiables (sans project_id, creator_id et creation_date --> jamais modifiables) et non-affichées:
			- start
			- end
			- state
			- value
			- effort
		Valeurs par défaut:
			- name: Boite de réception
			- description: Réception des tâches de tous types TBD
			- start: idem que projet
			- end: idem que projet
			- state: en cours (toujours)
			- value: 5
			- effort: 5
			- visible: 1
			- creator_id: personne qui a créé le projet
			- open: 0
		Le nom est par défaut "Boite de réception" mais peut être modifié afin de préciser ou de restreindre oralement ce qui est envoyé. Ainsi par défaut on peut envoyer tout ce qu'on veut (demandes, questions, commentaires, ...) et si on nomme "Tâches urgentes" c'est plus spécifique et on restreint les possibilités de tâches qui peuvent y être créées. On retrouve le nom du travail dans le placeholder du champ de création...

	--> Conséquences:
		- Pas inclut dans les calculs d'effort et de valeurs.
		- Pas inclut dans la planification puisque reste durant toute la longueur du projet.

	--> MLD: inbox bool

- travail répétitif: pratique pour indiquer que c'est un travail régulier et répétitif. après quelles sont les différences par la suite ? juste une indication pas d'autres conséquences. assoc: traiter les emails, valider les demandes denvoi de posts pour facebook + insta + twitter.

	Ex. possible d'un cas concret:
	GT Mail:
		- Gestion des emails:
			- Définitions des standards
			- Organisation du travail
			- Emails quotidiens
	
	GT Facebook: 
		- Gestion des posts
			- Questions
			- Demandes de posts
			- Postage des publications
		- News du mois
			- ...
	OK on met. par contre sur projet ou travail ??
	pour projet: processus global vague avec des répétitions. notion de "projet" qui devient un truc répétitif.
	pour travail: plus précis si qu'une partie est répétitive et pas le reste.
	--> Après longue réflexion le mot "travail répétitif" ca passe mieux que "projet répétitif" donc c'est pas pour rien, donc on met sur travail! C'est seulement une indication.


- need help: 
	
	tout simple et peut être utile pour demander de l'aide à l'extérieur du groupe réalisant le projet. Donc oui. Plutot stocké sur le travail pour être plus spécifique et pour qu'on sache sur quelle partie on demande de l'aide. Valeur INT parce que on peut demander de l'aide à différentes personnes: 0 = pas besoin d'aide. 1 = besoin d'aide des personnes réalisant le projet. 2 = besoin d'aides de personnes extérieures. 3 = besoin d'aide de personnes internes ou externes au projet.


- personne responsable du travail ?? juste mettre une clé "responsible_id"
	- oui mais alors facultatif.

- nouvel état: idée/proposition. comme pour les stories en Scrum.
	- est-ce que ca reste utile si il y a déjà l'état idée proposition pour les tâches (ca pourrait parce que si le groupe n'a pas encore de projet c'est pas possible de créer une tâche idée) ?? Non. ca surcharge la liste des projets et ca peut être fait dans le chat du groupe, donc ailleurs que sur KanFF. Donc NON!

- où sont fait et affichés les calculs avec les efforts et les valeurs des travaux ? Il n'y a pas de calcul. Il y a juste les valeurs d'effort affichées.

- travail réservé pour un groupe ? --> un travail est réservé (lié aux compétences) à un des groupes réalisant le projet. (réservation morale et non technique --> enfin... ??). Non! Complexifie la technique.

- Affichage:
	- travaux terminés et autres états pas en cours ?
	- quel ordre les travaux ont dans le kanban ? fixe mais alors faut stocker le rang ?
		- Tri par start croissant, puis end croissant. pour commencer.
	- couleur spéciale sur un travail si urgente (rouge clair par ex) OK
		- définition d'urgent:
			- le travail se fini aujourd'hui OK

-------------------------
Tâches:
- automatiques lors d'événements (création d'un projet, travail, ...)
	- Non. Utile que dans des cas spéciaux et rares.

- tâches pour plusieurs personnes
	- Intéressant, utile pour des tâches qui nécessitent plusieurs personnes. (pourrait y avoir une indication du nombre de personnes souhaités ou besoin, autre...). Mais pas indispensable, donc on met pas pour ne pas complexifier pour la v1.0.

- tâches pour tout le monde
	- Très utile pour donner des tâches à un groupe de personnes participant à un projet (groupe entier ou personnes ayant contribué ou autre tri). Et tracker l'avancement comme les tâches normales, sauf qu'on voit en plus quelle personnes en est à quoi.
	- Autre avantage: ne pas créer 25 tâches disant la même chose pour les 25 personnes qui devront le faire--> ce qui est trop long à créer + prend beaucoup de places, et qui n'a pas de vision pratique (faut compter le nombre de tâches à chaque état)
	- Voir combien et qui a la tâche en "à faire", "en cours" et "terminé" avec une tâche par colonne. Pour nous la tâche a sa couleur normale, et les autres (non cliquables) sont en grisé/transparent. les tâches n'apparaissent pas dans les colonnes où il n'y a personne qui est à cet état là. (voir maquettes).
	
	Dico:
		- tâche concrète: tâche qui sera déplacée par chaque utilisateur (1 par user). Il y en a plusieurs par tâche abstraite. 15 pour 15 personnes.
		- tâche abstraite: c'est la tâche à faire stocké dans tasks et qui a un nom. (cest la classe, tandis que les tâches concrètes sont les objets).

	Utilisation concrète:
		- on peut s'inclure et s'exclure d'une supertâche
		- A la création on choisit un sous-groupe de personnes des groupes réalisant. Tout le monde part avec l'état A faire.
		- Si la colonne contient des tâches concrètes de la supertâche, on voit une tâche grisée si ce n'est pas l'état de notre tâche concrète, si c'est notre état elle est de couleur normale.
		Si c'est une personne regarde le projet en étant non incluse dans le groupe, alors toutes les tâches concrètes sont grisées. Idem pour les gens extérieurs au projet.
		- Dans le panneau Détails d'une tâche: l'état de la tâche abstraite et concrète sont affichés (2 états donc).

		Que vaut l'état de la tâche concrète dans tasks ?
		- Si toutes les tâches concrètes sont à faire: état de la tâche abstraite = à faire
		- Si toutes les tâches concrètes sont terminé: état de la tâche abstraite = terminé
		- Dans tous les autres cas: état de la tâche abstraite = en cours.

		- Comment stocker ces valeurs dans le MLD ?
		- Table de jointure: make (faire) entre users et tasks
		- Champs de make:
			- id
			- user_id
			- task_id
			- state

			--> un item dans make correspond donc à 1 tâche concrète.

=====>>> Ces super tâches c'est génial!, mais ca complexifie beaucoup niveau technique pour gérer les tâches. Donc on ne fait pas pour la v1.0

- tâches répétitives (répétent automatiquement toutes les semaines ou tous les 2 jours par ex.)
	- Trop compliqué. Donc pas pour la v1.0.

- type: questions, décisions à prendre, tâche ?
	- Intéressant si clairement visible sur la tâche. Mettre en couleur différente selon le type. Oui couleur différente.
	- Listes des types libre ou définie ?
		- Je pencherais plus pour défini, histoire que ca devienne pas un moyen de mettre un tag unique. Ca doit quand même rester générale et pas être par ex. "longue", "administration"
	- Idées (question: qu'est-ce que c'est la tâche? qu'est-ce qu'on donne si on donne la tâche. utile si implique qqch de différent que les autres): tâche->action, question->réponse, idée->réflexion puis décision, info->consulter et stocker ou partager, réflexion->commenter/réagir, proposition->acceptation ou refus):
			- tâche (NON)
			- question
			- info
			- proposition
			- idée
			- réflexion
			OK! --> 5 types
	--> Mais tâche type tâche, c'est pas trop utile... donc par défaut c'est juste qu'il n'y a pas de type! (champ peut donc être null). on enlève l'option tâche.

à réfléchir (avis extérieurs):
idée et proposition trop semblable --> petite nuance donc on garde.
info /communication --> "information" c'est plus neutre donc on garde pour l'instant.

- complexité de 1 à 5 ? Ca fait un champ de plus à remplir qui n'est pas indispensable même si ca pourrait avoir une utilité. Donc NON.

- nouvel état tâche: bloqué ou en pause. voir icescrum. NON. pas très utile et champ supplémentaire.

- responsable de tâche ??
	- permet de donner des tâches précises à la fin des réunions. OUI. mais remplace user_id donc si assigné = responsable de la tâche.
Affichage:
	- bouton "+" en plus petit qu'une tâche.
	- couleur spéciale sur une tâche si urgente
		- qu'est-ce que "urgent" ?
		- si son travail est urgent
		- si deadline est aujourdhui
	- tâches ordrables ?? Afin de donner un certain ordre d'éxecution. Non pas vraiment utile. ordré par défaut par date de création.


nouveau type: rappel ? peut être rappel et tâche en meme temps (donc incohérent). fonctionne déjà avec les deadlines qui rendent les tâches urgentes (affichées dans Page Tâches). donc on met PAS.


-----------------------------
log:
- title à rajouter.
- context à rediscuter sur l'utilité. ouais. pas super clair et augmente l'espace d'affichage d'un log. on peut déjà l'inclure dans la description. On met PAS.
- importance vraiment utile ? pensé pour le tri à la base. (afficher que ceux au dessus de 10). Valeur compliquée à définir et assez subjective. Donc NON.
- date dernière modif et personne qui a fait la dernière modif. ca pourrait ajouter de la "sécurité" sur les logs, mais ce n'est pas sans faille non plus (on ne saura pas ce qui a été modifié et si c'est légitime ou pas). 
--> date de dernière modification on ajoute mais la personne qui a modifié non puisque c'est aussi la personne qui a créé le log. (cf dessous)
- qui peut modifier un log ?? C'est pas sensé être modifié. Uniquement la personne qui a créé le log peut modifier (en cas d'erreur--> modification ou suppression du log)
	- délai de modification après création: 4 jours
- peut-on supprimer un log ?? Uniquement la personne qui a créé le log.
	- délai de suppression après création: 4 jours

- support markdown ? ou markdown simplifié ? NON.
	- la version de https://commonmark.org/help/ paraît bien.
	- on peut avoir 2 versions: 1 complète et 1 pour description (sans titre # ## etc et sans citations et sans ligne horizontale)
	- Support markdown permettrait de ne pas rendre tout le texte neutre et visuellement ce serait plus joli.
	- mention d'une personne possible. se fait par @XDE (si les initiales existent ca pointe sur les détails du user)
	- mention d'un groupe possible: @GT Multimédia (lien pour détails du groupe si groupe trouvé) uniquement si le groupe est visible.
	- attention aux failles XSS.
	- Utile pour quelles textes ??
		- En fait il y a pas de texte assez long pour que le markdown soit vraiment utile...
		- Serait utile pour un Wiki, pour de longues descriptions ou explications, ...
		- Pour les logs, ca pourrait être utile mais c'est censé ne pas être très long les descriptions. et pour ne pas complexifier la v1.0 on fait pas. NON.

- visible ? il y a déjà une notion de visible sur le projet: logbook_visible, mais ?
	- oui utile de pouvoir gérer la visibilité sur chaque log, dans certains cas pour les groupes sensibles (infos sensibles ou log par rapport à une surprise). OUI on met.

Affichage:
- plusieurs mode d'affichage plus ou moins complet ?
	- Idées:
		- Titre et date uniquement et initiales
		- Titre et date et description raccourcie et initiales (le tout sur la même ligne)
		- Tout. (ajout date création)
		--> 3 boutons pour changer d'option en JS
- type vraiment utile ? a part pour la couleur et le tri non. NON.

-----------------------------
groups:
- prerequis: texte expliquant les prérequis nécessaires (compétences, motivation, temps, investissement, statut) pour rentrer dans le groupe. OUI.
- liste des groupes ordrés comment ?
	- Tout ordrés par état croissant, puis par nombre de membres décroissant.
	- Découpés en:
		- Actuels: En démarrage + Actif
		- En pause
		- Archivés
	-> voir maquette!

--------------------------------
users:
- comment mettre un statut "membre" et nouvelleau ? vraiment besoin ? non pas besoin.

- approuvé par : approver_id ?
	- utile en cas de problème (n'aurait pas du être approuvé) et un petit peu utile pour savoir qui nous a approuvé. donc on met. OUI.
date d'approbation ?? (en lien avec date de changement d'état.)
	- Utile en cas de problème (n'aurait pas du être approuvé, n'aurait pas du être archivé)
- "date de modification de state". comme ca on peut avoir "approuvé le x date", "en pause depuis le x date", "admin depuis le x date" affichés (et pas seulement l'approbation). oui.
		--> state_modification_date
	--> mais alors personne qui approuve, faudrait pas aussi mettre "dernière personne qui change état"?
		--> donc on met un champ state_modifier_id à la place de approver_id

Quels sont les changements d'état possible ? Aucun sauf si admin et approuvé.

- Problème admin et en pause pas possible les 2 en même temps (puisque c'est une seule valeur sur users.state).
	((- On pourrait dire qu'un admin en pause n'a plus besoin de son rôle d'admin (qui permet uniquement de gérer les membres) puisqu'il est censé ne pas être très présent. Sauf qu'au retour il ne pourra plus se remettre admin seul. Il faudra demander à un autre admin de le promouvoir.))
	--> Mais en fait, la valeur "en pause" n'a rien à faire ici: on créé un nouveau champ int onbreak avec comme valeur 0 non, 1 oui. (int--> en prévision d'une modification des valeurs possibles et d'un rajout de longueur de pause par ex.).

- Comment devenir ou ne plus être admin?
	- devenir: un.e autre admin doit nous promouvoir admin
	- ne plus être: on peut se retirer le rôle admin soit-même ou un.e autre admin peut nous retirer le rôle.
	--> La conséquence est qu'il ne doit jamais y avoir moins d'un admin dans le collectif. -> Vérification avant d'enlever un admin et bloquage de l'action si c'est le dernier admin.

- Y a-t-il un minimum d'admins dans le collectif ?
	- But: empêcher qu'un.e admin devienne seul.e et détruise tout.
	--> A définir. (2 3 ou plus ???)
	--> serait stocké dans les paramètres du collectif.

- comment une personne bannie peut savoir qu'elle a été bannie ? (si on archive le compte on ne sait pas formellement ce que c'est)
	--> stocker dans users.state une valeur pour "bannie"

------------
- Quid des roles et responsabilités ? par groupe ? par projet ?
	- Responsabilités:
		- Philosophie générale des responsabilités (ou question de vocabulaire):
			- Les responsabilités sont toutes les choses à faire dont une personne est responsable. Ex: Les tâches assignées, les travaux dont la personne est responsable, les projets dont la personne est responsable, sont des responsabilités. Responsable signifie une "Nécessité morale de remplir un devoir, un engagement" (lerobert.com)
		- Possible d'être responsable d'un projet ? Oui pour des projets courts c'est possible et ca complique peu le fonctionnement (la donnée peut être utile par rapport à la gestion du projet). Ca peut aussi être la personne qui s'assure que les tâches sont bien listées, de gérer la planification globale, d'être la personne de contact. Alors on met. OUI.
		- responsable d'un groupe ? la possibilité que je vois est "gestion des membres" (possibilité technique). Mais c'est les admins du groupe qui peuvent faire ca. donc NON.


Permissions:
- Qui peut gérer un compte de membre ?
	- Créer: Public
	- Modifier infos: Membre uniquement
	- Modifier état: Autres admins uniquement
	- Supprimer: Membre uniquement
	- Définir état en pause: Membre et admin.
- Qui peut gérer un groupe ?
	- Créer: Tous les membres du collectif
	- Modifier: Tous les admins du groupe
	- Supprimer: Tous les admins du groupe
	- Gérer les membres: Tous les admins du groupe
- Qui peut gérer un projet ?
	- Créer: Tous les membres du collectif
	- Modifier: responsable du projet
	- Supprimer: responsable du projet
	- Groupes participants: responsable du projet
- Qui peut gérer un travail ?
	- Créer: Tous les membres du collectif
	- Modifier: Tous les membres du groupe
	- Supprimer: responsable du projet
- Qui peut gérer une tâche ? (si travail non boite de réception et si non ouvert--> pour ces exceptions les droits sont impactés)
	- Créer: Tous les membres du groupe
	- Modifier: Tous les membres du groupe
	- Supprimer: Tous les membres du groupe
- Qui peut gérer une tâche ? (si travail open)
	- Créer: Tous les membres du collectif
	- Modifier: Tous les membres du collectif
	- Supprimer: Tous les membres du groupe et la personne qui a créé sa tâche


Quid des commentaires sur les tâches ou sur les travaux ?
	-> unique moyen de communiquer et d'avoir des réponses à propos de tâches ou de travaux.
	-> Très utile mais trop de travail en plus pour la v1.0... donc NON.


---------------
groups:

- personne de contact ? C'est plus pour les projets qu'il peut y avoir une personne de contact. Et actuellement on peut dire implicitement que c'est la personne responsable. NON.

- communiquer sur le temps qu'on a à investir dans un projet ou un groupe ? et ses intérêts et capacités ?
- On le fait en dehors de KanFF... donc NON.

- raison de joindre un GT ? Pourquoi on rejoint, par curiosité sans avoir le temps, donner son avis, sur quoi on veut aider ?
- On le fait en dehors de KanFF... donc NON.


---------------
join:
- valeurs de accepted:
	--> changer en state, car le nom du champ accepted n'a plus de sens avec les valeurs.
	->sens: state of the subscription. The state is influenced by the group type (restricted access or not)

Question sous entendue: comment rejoint-on un groupe ?
	- rejoint par soi-même directement
	- on rejoint et on attend d'être approuvé
	- on recoit une invitation et on l'accepte
	- qqun.e dans le groupe nous ajoute avec effet immédiat (pas de valeur dédiée mais directement approuvé)
	--> à partir du moment où on a rejoint, date start est définie

Question dérivée: comment quitte-on un groupe ? (quitter ne signifie pas forcément qu'on a été un moment dans le groupe ici (si on refuse une invitation on a "quitté"))
	- on quitte par soi-même
	- on se fait bannir
	- on se fait refuser l'entrée
	- on refuse une invitation
	--> à partir du moment où on a quitté, date end est définie


	Si accès restreint toutes ces valeurs sont possibles:
	1 = non approved
	2 = refused
	3 = invitation
	4 = left
	5 = invitation refused
	6 = banned of the group
	7 = invitation accepted
	8 = approved

	Si accès non restreint alors seulement ces valeurs sont possibles:
	3 = invitation
	4 = left
	5 = invitation refused
	6 = banned of the group
	7 = invitation accepted
	8 = approved

	--> les invitations, bannir un user, quitter par soi-même est donc possible.

	Dans l'app, sera affiché seulement le dernier join par groupe (un seul join par groupe) par user (il n'y a donc pas d'historique affiché).

- membres admins dans des groupes: pour tâche importantes ? OUI.
	- personne qui crée le groupe est admin.
	- au moins un.e admin par groupe (pas de max)
	- peut supprimer le groupe et gérer les membres du groupe
	--> join.admin int

date de changement d'état ? 
	--> déjà dans start et end car on ne peut pas modifier l'état sans rentrer ou sortir du groupe. Si on rentre on met à jour la date start et si on quitte on change la date de end. Les dates sont donc déjà enregistrées.


---------------
participate:
- utilité de reason start et end ? ahhh. euh. Je sais plus trop pourquoi. On enlève c'est plus simple.

- valeurs de state ?
	Question sous entendue: comment un groupe commence à participer à un projet ?
		- avec une invitation
		- le groupe est le créateur et donc participe directement
		--> à partir du moment où le groupe participe, date start est définie
	
	
	Question dérivée: comment un groupe s'arrête de participer à un projet ?
		- invitation refusée
		- groupe banni par le groupe gérant
		- le groupe a quitté lui-même
		--> à partir du moment où le groupe ne participe plus, date start est définie
	
	
	- valeurs de state (état de la participation):
	
		1 = invitation
		2 = invitation accepted
		3 = creator
		4 = has left
		5 = invitation refused
		6 = banned
	
	Quels groupes peuvent gérer les participants ? (actions à grandes conséquences)
		- donc qui peut faire une invitation à un autre groupe, bannir un groupe ?
		--> Le groupe "admin" enfin qui gére les participants. -> on rajoute un champ manager_id qui est l'id du groupe qui gère les participants.
		----> Dans ce groupe seulement les admins peuvent effectuer ces actions.
		-> manager_id int
	
	- Chaque groupe externe au projet peut accepter l'invitation ou la refuser, et chaque groupe interne au projet peut quitter lui-même.
